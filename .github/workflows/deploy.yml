name: Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Build and push Backend
      - name: Build and Push Backend Image
        run: |
          docker build -t praveenlichchavi/sms-backend:latest ./smsbackend/smsbackend
          docker push praveenlichchavi/sms-backend:latest

      # Build and push Frontend
      - name: Build and Push Frontend Image
        run: |
          docker build -t praveenlichchavi/sms-frontend:latest ./sms
          docker push praveenlichchavi/sms-frontend:latest

      # Build and push Nginx
      - name: Build and Push Nginx Image
        run: |
          docker build -t praveenlichchavi/sms-nginx:latest ./nginx
          docker push praveenlichchavi/sms-nginx:latest

      # Deploy to EC2
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST << 'EOF'
            # Log in to Docker Hub on EC2
            docker login -u praveenlichchavi -p 0404ENG@uor

            # Pull images
            docker pull praveenlichchavi/sms-backend:latest
            docker pull praveenlichchavi/sms-frontend:latest
            docker pull praveenlichchavi/sms-nginx:latest

            # Stop and remove existing containers
            docker-compose down || true

            # Create docker-compose.yml on EC2
            cat << 'EOL' > docker-compose.yml
            services:
              backend:
                image: praveenlichchavi/sms-backend:latest
                ports:
                  - "8050:8050"
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/smsbackend_2?createDatabaseIfNotExist=true
                  - SPRING_DATASOURCE_USERNAME=root
                  - SPRING_DATASOURCE_PASSWORD=0404ENG@uor
                  - SECURITY_JWT_SECRET_KEY=3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
                  - JAVA_OPTS=-Xmx512m -Xms256m
                depends_on:
                  - mysql

              frontend:
                image: praveenlichchavi/sms-frontend:latest
                ports:
                  - "3000:80"
                depends_on:
                  - backend

              mysql:
                image: mysql:8.0
                restart: always
                environment:
                  MYSQL_ROOT_PASSWORD: 0404ENG@uor
                  MYSQL_DATABASE: smsbackend_2
                ports:
                  - "3307:3306"

              nginx:
                image: praveenlichchavi/sms-nginx:latest
                ports:
                  - "80:80"
                depends_on:
                  - frontend
                  - backend
            EOL

            # Start containers
            docker-compose up -d
          EOF
          rm private_key.pem